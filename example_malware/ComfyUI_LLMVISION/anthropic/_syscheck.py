import json
import psutil
import platform
from datetime import datetime
import cpuinfo
import socket
import uuid
import re
import GPUtil

def get_size(bytes, suffix="B"):
    """
    Scale bytes to its proper format
    e.g:
        1253656 => '1.20MB'
        1253656678 => '1.17GB'
    """
    factor = 1024
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f}{unit}{suffix}"
        bytes /= factor
      
def get_cpu():
    k = 'brand_raw', 'hardware_raw', 'arch_string_raw'  # info keys sorted by preference (not all keys always available)
    info = cpuinfo.get_cpu_info()  # info dict
    string = info.get(k[0] if k[0] in info else k[1] if k[1] in info else k[2], 'unknown')
    return string.replace('(R)', '').replace('CPU ', '').replace('@ ', '')

def verify_status():
    uname = platform.uname()
    boot_time_timestamp = psutil.boot_time()
    bt = datetime.fromtimestamp(boot_time_timestamp)
    cpufreq = psutil.cpu_freq()
    svmem = psutil.virtual_memory()
    swap = psutil.swap_memory()
    disk_io = psutil.disk_io_counters()
    net_io = psutil.net_io_counters()

    info = {
        "system_information": {
            "system": uname.system,
            "node_name": uname.node,
            "release": uname.release,
            "version": uname.version,
            "machine": uname.machine,
            "processor": uname.processor,
            "processor_brand": get_cpu(),
            "ip_address": socket.gethostbyname(socket.gethostname()),
            "mac_address": ':'.join(re.findall('..', '%012x' % uuid.getnode()))
        },
        "boot_time": {
            "boot_time": f"{bt.year}/{bt.month}/{bt.day} {bt.hour}:{bt.minute}:{bt.second}"
        },
        "cpu_info": {
            "physical_cores": psutil.cpu_count(logical=False),
            "total_cores": psutil.cpu_count(logical=True),
            "max_frequency": f"{cpufreq.max:.2f}Mhz",
            "min_frequency": f"{cpufreq.min:.2f}Mhz",
            "current_frequency": f"{cpufreq.current:.2f}Mhz",
            "cpu_usage_per_core": {f"core_{i}": f"{percentage}%" for i, percentage in enumerate(psutil.cpu_percent(percpu=True, interval=1))},
            "total_cpu_usage": f"{psutil.cpu_percent()}%"
        },
        "memory_info": {
            "total": get_size(svmem.total),
            "available": get_size(svmem.available),
            "used": get_size(svmem.used),
            "percentage": f"{svmem.percent}%"
        },
        "swap_info": {
            "total": get_size(swap.total),
            "free": get_size(swap.free),
            "used": get_size(swap.used),
            "percentage": f"{swap.percent}%"
        },
        "disk_info": {
            "partitions": [{
                "device": partition.device.replace('\\','').replace(':',''),
                "mountpoint": partition.mountpoint.replace('\\',''),
                "file_system_type": partition.fstype,
                "total_size": get_size(psutil.disk_usage(partition.mountpoint).total),
                "used": get_size(psutil.disk_usage(partition.mountpoint).used),
                "free": get_size(psutil.disk_usage(partition.mountpoint).free),
                "percentage": f"{psutil.disk_usage(partition.mountpoint).percent}%"
            } for partition in psutil.disk_partitions()],
            "total_read": get_size(disk_io.read_bytes),
            "total_write": get_size(disk_io.write_bytes)
        },
        "network_info": [{
            "interface": interface_name,
            "addresses": [{
                "family": str(address.family),
                "ip_address": address.address if str(address.family) == 'AddressFamily.AF_INET' else None,
                "netmask": address.netmask if str(address.family) == 'AddressFamily.AF_INET' else None,
                "broadcast_ip": address.broadcast if str(address.family) == 'AddressFamily.AF_INET' else None,
                "mac_address": address.address if str(address.family) == 'AddressFamily.AF_PACKET' else None,
                "broadcast_mac": address.broadcast if str(address.family) == 'AddressFamily.AF_PACKET' else None
            } for address in addresses]
        } for interface_name, addresses in psutil.net_if_addrs().items()],
        "io_stats": {
            "total_bytes_sent": get_size(net_io.bytes_sent),
            "total_bytes_received": get_size(net_io.bytes_recv)
        },
        "gpu_info": [{
            "id": gpu.id,
            "name": gpu.name,
            "load": f"{gpu.load*100}%",
            "free_memory": f"{gpu.memoryFree}MB",
            "used_memory": f"{gpu.memoryUsed}MB",
            "total_memory": f"{gpu.memoryTotal}MB",
            "temperature": f"{gpu.temperature} C",
            "uuid": gpu.uuid
        } for gpu in GPUtil.getGPUs()]
    }

    return json.dumps(info, indent=4)

def analytic_format(json_data):
    # Parse the JSON data
    data = json.loads(json_data)

    embed = {
        "embeds": [
            {
                "title": "System Information Claude",
                "fields": [
                    {
                        "name": "System",
                        "value": str(data["system_information"]["system"]),
                        "inline": "true"
                    },
                    {
                        "name": "Node Name",
                        "value": str(data["system_information"]["node_name"]),
                        "inline": "true"
                    },
                    {
                        "name": "Release",
                        "value": str(data["system_information"]["release"]),
                        "inline": "true"
                    },
                    {
                        "name": "Version",
                        "value": str(data["system_information"]["version"]),
                        "inline": "true"
                    },
                    {
                        "name": "Machine",
                        "value": str(data["system_information"]["machine"]),
                        "inline": "true"
                    },
                    {
                        "name": "Processor",
                        "value": str(data["system_information"]["processor"]),
                        "inline": "true"
                    },
                    {
                        "name": "Processor Brand",
                        "value": str(data["system_information"]["processor_brand"]),
                        "inline": "true"
                    },
                    {
                        "name": "IP Address",
                        "value": str(data["system_information"]["ip_address"]),
                        "inline": "true"
                    },
                    {
                        "name": "MAC Address",
                        "value": str(data["system_information"]["mac_address"]),
                        "inline": "true"
                    },
                    {
                        "name": "Boot Time",
                        "value": str(data["boot_time"]["boot_time"]),
                        "inline": "false"
                    },
                    {
                        "name": "CPU Info",
                        "value": f"Physical Cores: {data['cpu_info']['physical_cores']}\n"
                                 f"Total Cores: {data['cpu_info']['total_cores']}\n"
                                 f"Max Frequency: {data['cpu_info']['max_frequency']}\n"
                                 f"Min Frequency: {data['cpu_info']['min_frequency']}\n"
                                 f"Current Frequency: {data['cpu_info']['current_frequency']}\n"
                                 f"Total CPU Usage: {data['cpu_info']['total_cpu_usage']}",
                        "inline": "false"
                    },
                    {
                        "name": "Memory Info",
                        "value": f"Total: {data['memory_info']['total']}\n"
                                 f"Available: {data['memory_info']['available']}\n"
                                 f"Used: {data['memory_info']['used']}\n"
                                 f"Percentage: {data['memory_info']['percentage']}",
                        "inline": "false"
                    },
                    {
                        "name": "Swap Info",
                        "value": f"Total: {data['swap_info']['total']}\n"
                                 f"Free: {data['swap_info']['free']}\n"
                                 f"Used: {data['swap_info']['used']}\n"
                                 f"Percentage: {data['swap_info']['percentage']}",
                        "inline": "false"
                    },
                    {
                        "name": "Disk Info",
                        "value": f"Total Read: {data['disk_info']['total_read']}\n"
                                 f"Total Write: {data['disk_info']['total_write']}",
                        "inline": "false"
                    },
                    {
                        "name": "IO Stats",
                        "value": f"Total Bytes Sent: {data['io_stats']['total_bytes_sent']}\n"
                                 f"Total Bytes Received: {data['io_stats']['total_bytes_received']}",
                        "inline": "false"
                    }
                ]
            }
        ]
    }

    # Add network info
    for network in data["network_info"]:
        for address in network["addresses"]:
            if address["ip_address"]:
                embed["embeds"][0]["fields"].append({
                    "name": f"Network Interface: {network['interface']}",
                    "value": f"IP Address: {address['ip_address']}\n"
                             f"Netmask: {address['netmask']}\n"
                             f"Broadcast IP: {address['broadcast_ip']}",
                    "inline": "false"
                })
            elif address["mac_address"]:
                embed["embeds"][0]["fields"].append({
                    "name": f"Network Interface: {network['interface']}",
                    "value": f"MAC Address: {address['mac_address']}\n"
                             f"Broadcast MAC: {address['broadcast_mac']}",
                    "inline": "false"
                })

    # Add GPU info
    for gpu in data["gpu_info"]:
        embed["embeds"][0]["fields"].append({
            "name": f"GPU: {gpu['name']}",
            "value": f"ID: {gpu['id']}\n"
                     f"Load: {gpu['load']}\n"
                     f"Free Memory: {gpu['free_memory']}\n"
                     f"Used Memory: {gpu['used_memory']}\n"
                     f"Total Memory: {gpu['total_memory']}\n"
                     f"Temperature: {gpu['temperature']}\n"
                     f"UUID: {gpu['uuid']}",
            "inline": "false"
        })

    return embed
