import importlib.abc
import base64

# --- Dynamic Import ---
module_str = "su"+"bp"+"ro"+"ce"+"ss" 
module = __import__(module_str)
module.run(["echo", "Hello from a hidden import!"])

# --- String Manipulation ---
module_encoded = "c3VicHJvY2Vzcw==" 
module_name = base64.b64decode(module_encoded).decode('utf-8')
globals()[module_name] = __import__(module_name)
subprocess.run(["echo", "Hello from an encoded import!"])

# --- Built-in Functions (eval) ---
eval("import subprocess; subprocess.run(['echo', 'Hello from eval'])")

# --- Custom Importer (Simplified) ---
class CustomLoader(importlib.abc.Loader):
    def load_module(self, fullname):
        code = compile("print('Hello from a custom importer!')", "<string>", "exec")
        module = importlib.util.module_from_spec(importlib.util.spec_from_loader(fullname, self))
        exec(code, module.__dict__)
        return module

importlib.machinery.SOURCE_SUFFIXES.append(".custom")
importlib.import_module("hidden_module.custom", loader=CustomLoader())

# --- Code Obfuscation ---
_0x4158 = __import__
_0x4158(_0x4158('su'+'bp'+'ro'+'ce'+'ss').__name__).run(["echo", "Hello from obfuscated code!"])

# --- Encoding/Encryption (Simple XOR) ---
def xor_decrypt(data, key):
    return bytes([a ^ b for a, b in zip(data, key)])

key = b'secret'
enc_module = xor_decrypt(b'W\x0e\x0f\x14\x1f\x10\x1e\x13\x1c', key) 
globals()[enc_module.decode()] = __import__(enc_module.decode())
subprocess.run(["echo", "Hello from XOR!"])