rule win_wipbot_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-12-06"
        version = "1"
        description = "Detects win.wipbot."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.wipbot"
        malpedia_rule_date = "20231130"
        malpedia_hash = "fc8a0e9f343f6d6ded9e7df1a64dac0cc68d7351"
        malpedia_version = "20230808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { eb05 b8???????? e8???????? 89da 83c9ff e8???????? }
            // n = 6, score = 100
            //   eb05                 | jmp                 7
            //   b8????????           |                     
            //   e8????????           |                     
            //   89da                 | mov                 edx, ebx
            //   83c9ff               | or                  ecx, 0xffffffff
            //   e8????????           |                     

        $sequence_1 = { 5b 5d e9???????? 5a 31c0 5b 5d }
            // n = 7, score = 100
            //   5b                   | pop                 ebx
            //   5d                   | pop                 ebp
            //   e9????????           |                     
            //   5a                   | pop                 edx
            //   31c0                 | xor                 eax, eax
            //   5b                   | pop                 ebx
            //   5d                   | pop                 ebp

        $sequence_2 = { 4c 8d442428 baff010f00 48 89d9 ffd0 48 }
            // n = 7, score = 100
            //   4c                   | dec                 esp
            //   8d442428             | lea                 eax, [esp + 0x28]
            //   baff010f00           | mov                 edx, 0xf01ff
            //   48                   | dec                 eax
            //   89d9                 | mov                 ecx, ebx
            //   ffd0                 | call                eax
            //   48                   | dec                 eax

        $sequence_3 = { b911000000 31c0 c644245e2e 31d2 f3aa c644245f0b c64424601f }
            // n = 7, score = 100
            //   b911000000           | mov                 ecx, 0x11
            //   31c0                 | xor                 eax, eax
            //   c644245e2e           | mov                 byte ptr [esp + 0x5e], 0x2e
            //   31d2                 | xor                 edx, edx
            //   f3aa                 | rep stosb           byte ptr es:[edi], al
            //   c644245f0b           | mov                 byte ptr [esp + 0x5f], 0xb
            //   c64424601f           | mov                 byte ptr [esp + 0x60], 0x1f

        $sequence_4 = { 85c0 48 89c6 0f94c2 48 85db 0f94c0 }
            // n = 7, score = 100
            //   85c0                 | test                eax, eax
            //   48                   | dec                 eax
            //   89c6                 | mov                 esi, eax
            //   0f94c2               | sete                dl
            //   48                   | dec                 eax
            //   85db                 | test                ebx, ebx
            //   0f94c0               | sete                al

        $sequence_5 = { 8d44245f 88d1 48 01d0 48 ffc2 3208 }
            // n = 7, score = 100
            //   8d44245f             | lea                 eax, [esp + 0x5f]
            //   88d1                 | mov                 cl, dl
            //   48                   | dec                 eax
            //   01d0                 | add                 eax, edx
            //   48                   | dec                 eax
            //   ffc2                 | inc                 edx
            //   3208                 | xor                 cl, byte ptr [eax]

        $sequence_6 = { eb7d 48 894c2438 e8???????? 01c0 ba9ad65fb0 b98a758b1f }
            // n = 7, score = 100
            //   eb7d                 | jmp                 0x7f
            //   48                   | dec                 eax
            //   894c2438             | mov                 dword ptr [esp + 0x38], ecx
            //   e8????????           |                     
            //   01c0                 | add                 eax, eax
            //   ba9ad65fb0           | mov                 edx, 0xb05fd69a
            //   b98a758b1f           | mov                 ecx, 0x1f8b758a

        $sequence_7 = { 8d55f4 89542408 8d55f0 c744240c00800000 89542404 c70424ffffffff ffd0 }
            // n = 7, score = 100
            //   8d55f4               | lea                 edx, [ebp - 0xc]
            //   89542408             | mov                 dword ptr [esp + 8], edx
            //   8d55f0               | lea                 edx, [ebp - 0x10]
            //   c744240c00800000     | mov                 dword ptr [esp + 0xc], 0x8000
            //   89542404             | mov                 dword ptr [esp + 4], edx
            //   c70424ffffffff       | mov                 dword ptr [esp], 0xffffffff
            //   ffd0                 | call                eax

        $sequence_8 = { 89cb b91d000000 c64424222e f3aa c644242379 c644242446 31c0 }
            // n = 7, score = 100
            //   89cb                 | mov                 ebx, ecx
            //   b91d000000           | mov                 ecx, 0x1d
            //   c64424222e           | mov                 byte ptr [esp + 0x22], 0x2e
            //   f3aa                 | rep stosb           byte ptr es:[edi], al
            //   c644242379           | mov                 byte ptr [esp + 0x23], 0x79
            //   c644242446           | mov                 byte ptr [esp + 0x24], 0x46
            //   31c0                 | xor                 eax, eax

        $sequence_9 = { 8944240c 8b45a8 83c020 890424 ffd2 85c0 0f9fc0 }
            // n = 7, score = 100
            //   8944240c             | mov                 dword ptr [esp + 0xc], eax
            //   8b45a8               | mov                 eax, dword ptr [ebp - 0x58]
            //   83c020               | add                 eax, 0x20
            //   890424               | mov                 dword ptr [esp], eax
            //   ffd2                 | call                edx
            //   85c0                 | test                eax, eax
            //   0f9fc0               | setg                al

    condition:
        7 of them and filesize < 253952
}