rule win_xbtl_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-12-06"
        version = "1"
        description = "Detects win.xbtl."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.xbtl"
        malpedia_rule_date = "20231130"
        malpedia_hash = "fc8a0e9f343f6d6ded9e7df1a64dac0cc68d7351"
        malpedia_version = "20230808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { ffd7 50 ffd3 8bd8 85f6 7406 8d45e8 }
            // n = 7, score = 100
            //   ffd7                 | call                edi
            //   50                   | push                eax
            //   ffd3                 | call                ebx
            //   8bd8                 | mov                 ebx, eax
            //   85f6                 | test                esi, esi
            //   7406                 | je                  8
            //   8d45e8               | lea                 eax, [ebp - 0x18]

        $sequence_1 = { 99 8bd8 8bc1 99 33f6 0bf0 3135???????? }
            // n = 7, score = 100
            //   99                   | cdq                 
            //   8bd8                 | mov                 ebx, eax
            //   8bc1                 | mov                 eax, ecx
            //   99                   | cdq                 
            //   33f6                 | xor                 esi, esi
            //   0bf0                 | or                  esi, eax
            //   3135????????         |                     

        $sequence_2 = { 8d45ec 8d95f0fdffff e8???????? 8b85d4fdffff 56 56 6a03 }
            // n = 7, score = 100
            //   8d45ec               | lea                 eax, [ebp - 0x14]
            //   8d95f0fdffff         | lea                 edx, [ebp - 0x210]
            //   e8????????           |                     
            //   8b85d4fdffff         | mov                 eax, dword ptr [ebp - 0x22c]
            //   56                   | push                esi
            //   56                   | push                esi
            //   6a03                 | push                3

        $sequence_3 = { 85d2 782a 895dfc 8b4d08 0fb63c0a 8b460c 0345fc }
            // n = 7, score = 100
            //   85d2                 | test                edx, edx
            //   782a                 | js                  0x2c
            //   895dfc               | mov                 dword ptr [ebp - 4], ebx
            //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]
            //   0fb63c0a             | movzx               edi, byte ptr [edx + ecx]
            //   8b460c               | mov                 eax, dword ptr [esi + 0xc]
            //   0345fc               | add                 eax, dword ptr [ebp - 4]

        $sequence_4 = { 0fb67808 89948dc0feffff 0fb65007 c1e208 0bd7 }
            // n = 5, score = 100
            //   0fb67808             | movzx               edi, byte ptr [eax + 8]
            //   89948dc0feffff       | mov                 dword ptr [ebp + ecx*4 - 0x140], edx
            //   0fb65007             | movzx               edx, byte ptr [eax + 7]
            //   c1e208               | shl                 edx, 8
            //   0bd7                 | or                  edx, edi

        $sequence_5 = { 83c41c 8d4c2410 51 ffd7 8b442434 8b4c2428 8b1d???????? }
            // n = 7, score = 100
            //   83c41c               | add                 esp, 0x1c
            //   8d4c2410             | lea                 ecx, [esp + 0x10]
            //   51                   | push                ecx
            //   ffd7                 | call                edi
            //   8b442434             | mov                 eax, dword ptr [esp + 0x34]
            //   8b4c2428             | mov                 ecx, dword ptr [esp + 0x28]
            //   8b1d????????         |                     

        $sequence_6 = { 8bd6 897c2420 2bd0 0fb708 66890c02 83c002 }
            // n = 6, score = 100
            //   8bd6                 | mov                 edx, esi
            //   897c2420             | mov                 dword ptr [esp + 0x20], edi
            //   2bd0                 | sub                 edx, eax
            //   0fb708               | movzx               ecx, word ptr [eax]
            //   66890c02             | mov                 word ptr [edx + eax], cx
            //   83c002               | add                 eax, 2

        $sequence_7 = { 03048de0c04200 eb02 8bc2 f6402480 7417 e8???????? c70016000000 }
            // n = 7, score = 100
            //   03048de0c04200       | add                 eax, dword ptr [ecx*4 + 0x42c0e0]
            //   eb02                 | jmp                 4
            //   8bc2                 | mov                 eax, edx
            //   f6402480             | test                byte ptr [eax + 0x24], 0x80
            //   7417                 | je                  0x19
            //   e8????????           |                     
            //   c70016000000         | mov                 dword ptr [eax], 0x16

        $sequence_8 = { 81e600ff00ff c1c208 81e2ff00ff00 0bf2 897018 8b491c }
            // n = 6, score = 100
            //   81e600ff00ff         | and                 esi, 0xff00ff00
            //   c1c208               | rol                 edx, 8
            //   81e2ff00ff00         | and                 edx, 0xff00ff
            //   0bf2                 | or                  esi, edx
            //   897018               | mov                 dword ptr [eax + 0x18], esi
            //   8b491c               | mov                 ecx, dword ptr [ecx + 0x1c]

        $sequence_9 = { 8b5708 40 83c410 894704 3bc2 7e16 8d0412 }
            // n = 7, score = 100
            //   8b5708               | mov                 edx, dword ptr [edi + 8]
            //   40                   | inc                 eax
            //   83c410               | add                 esp, 0x10
            //   894704               | mov                 dword ptr [edi + 4], eax
            //   3bc2                 | cmp                 eax, edx
            //   7e16                 | jle                 0x18
            //   8d0412               | lea                 eax, [edx + edx]

    condition:
        7 of them and filesize < 401408
}