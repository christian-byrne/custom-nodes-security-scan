rule win_ascentloader_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-12-06"
        version = "1"
        description = "Detects win.ascentloader."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ascentloader"
        malpedia_rule_date = "20231130"
        malpedia_hash = "fc8a0e9f343f6d6ded9e7df1a64dac0cc68d7351"
        malpedia_version = "20230808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 1bc0 f7d8 eb02 8bc3 85c0 }
            // n = 5, score = 100
            //   1bc0                 | sbb                 eax, eax
            //   f7d8                 | neg                 eax
            //   eb02                 | jmp                 4
            //   8bc3                 | mov                 eax, ebx
            //   85c0                 | test                eax, eax

        $sequence_1 = { 741b 6a1a 2bf7 59 }
            // n = 4, score = 100
            //   741b                 | je                  0x1d
            //   6a1a                 | push                0x1a
            //   2bf7                 | sub                 esi, edi
            //   59                   | pop                 ecx

        $sequence_2 = { 85c0 7414 8b0f e8???????? 8b4e48 e8???????? 33c0 }
            // n = 7, score = 100
            //   85c0                 | test                eax, eax
            //   7414                 | je                  0x16
            //   8b0f                 | mov                 ecx, dword ptr [edi]
            //   e8????????           |                     
            //   8b4e48               | mov                 ecx, dword ptr [esi + 0x48]
            //   e8????????           |                     
            //   33c0                 | xor                 eax, eax

        $sequence_3 = { 40 001c5b 40 0023 }
            // n = 4, score = 100
            //   40                   | inc                 eax
            //   001c5b               | add                 byte ptr [ebx + ebx*2], bl
            //   40                   | inc                 eax
            //   0023                 | add                 byte ptr [ebx], ah

        $sequence_4 = { c78564ffffff76650d0a 66c78568ffffff0d0a c6856affffff00 f30f7f856cffffff 660f6f05???????? f30f7f857cffffff }
            // n = 6, score = 100
            //   c78564ffffff76650d0a     | mov    dword ptr [ebp - 0x9c], 0xa0d6576
            //   66c78568ffffff0d0a     | mov    word ptr [ebp - 0x98], 0xa0d
            //   c6856affffff00       | mov                 byte ptr [ebp - 0x96], 0
            //   f30f7f856cffffff     | movdqu              xmmword ptr [ebp - 0x94], xmm0
            //   660f6f05????????     |                     
            //   f30f7f857cffffff     | movdqu              xmmword ptr [ebp - 0x84], xmm0

        $sequence_5 = { 6a01 58 0f43f0 6a22 59 }
            // n = 5, score = 100
            //   6a01                 | push                1
            //   58                   | pop                 eax
            //   0f43f0               | cmovae              esi, eax
            //   6a22                 | push                0x22
            //   59                   | pop                 ecx

        $sequence_6 = { 40 0038 aa 40 }
            // n = 4, score = 100
            //   40                   | inc                 eax
            //   0038                 | add                 byte ptr [eax], bh
            //   aa                   | stosb               byte ptr es:[edi], al
            //   40                   | inc                 eax

        $sequence_7 = { 83f8ff 7518 ff15???????? 57 ff15???????? ff15???????? e9???????? }
            // n = 7, score = 100
            //   83f8ff               | cmp                 eax, -1
            //   7518                 | jne                 0x1a
            //   ff15????????         |                     
            //   57                   | push                edi
            //   ff15????????         |                     
            //   ff15????????         |                     
            //   e9????????           |                     

        $sequence_8 = { 85c0 7508 6a11 e8???????? 59 ff34f5c8484100 }
            // n = 6, score = 100
            //   85c0                 | test                eax, eax
            //   7508                 | jne                 0xa
            //   6a11                 | push                0x11
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   ff34f5c8484100       | push                dword ptr [esi*8 + 0x4148c8]

        $sequence_9 = { 8d45e0 50 56 ff15???????? 8b5dec }
            // n = 5, score = 100
            //   8d45e0               | lea                 eax, [ebp - 0x20]
            //   50                   | push                eax
            //   56                   | push                esi
            //   ff15????????         |                     
            //   8b5dec               | mov                 ebx, dword ptr [ebp - 0x14]

    condition:
        7 of them and filesize < 253952
}