rule win_cryptoshuffler_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-12-06"
        version = "1"
        description = "Detects win.cryptoshuffler."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cryptoshuffler"
        malpedia_rule_date = "20231130"
        malpedia_hash = "fc8a0e9f343f6d6ded9e7df1a64dac0cc68d7351"
        malpedia_version = "20230808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 03fb e8???????? 8bf0 3b35???????? 7430 }
            // n = 5, score = 100
            //   03fb                 | add                 edi, ebx
            //   e8????????           |                     
            //   8bf0                 | mov                 esi, eax
            //   3b35????????         |                     
            //   7430                 | je                  0x32

        $sequence_1 = { 83c408 85c0 0f8496040000 6aff 6a00 8d442430 50 }
            // n = 7, score = 100
            //   83c408               | add                 esp, 8
            //   85c0                 | test                eax, eax
            //   0f8496040000         | je                  0x49c
            //   6aff                 | push                -1
            //   6a00                 | push                0
            //   8d442430             | lea                 eax, [esp + 0x30]
            //   50                   | push                eax

        $sequence_2 = { 6bc830 8b049578f60210 f644082801 7421 57 }
            // n = 5, score = 100
            //   6bc830               | imul                ecx, eax, 0x30
            //   8b049578f60210       | mov                 eax, dword ptr [edx*4 + 0x1002f678]
            //   f644082801           | test                byte ptr [eax + ecx + 0x28], 1
            //   7421                 | je                  0x23
            //   57                   | push                edi

        $sequence_3 = { 0f57c0 c78424f400000000000000 68???????? 8d8c24e8000000 0f298424e8000000 e8???????? }
            // n = 6, score = 100
            //   0f57c0               | xorps               xmm0, xmm0
            //   c78424f400000000000000     | mov    dword ptr [esp + 0xf4], 0
            //   68????????           |                     
            //   8d8c24e8000000       | lea                 ecx, [esp + 0xe8]
            //   0f298424e8000000     | movaps              xmmword ptr [esp + 0xe8], xmm0
            //   e8????????           |                     

        $sequence_4 = { c745ec10f80010 894df8 8945fc 64a100000000 8945e8 }
            // n = 5, score = 100
            //   c745ec10f80010       | mov                 dword ptr [ebp - 0x14], 0x1000f810
            //   894df8               | mov                 dword ptr [ebp - 8], ecx
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   64a100000000         | mov                 eax, dword ptr fs:[0]
            //   8945e8               | mov                 dword ptr [ebp - 0x18], eax

        $sequence_5 = { e9???????? c745dc03000000 eb7c c745e0e04d0210 ebbb }
            // n = 5, score = 100
            //   e9????????           |                     
            //   c745dc03000000       | mov                 dword ptr [ebp - 0x24], 3
            //   eb7c                 | jmp                 0x7e
            //   c745e0e04d0210       | mov                 dword ptr [ebp - 0x20], 0x10024de0
            //   ebbb                 | jmp                 0xffffffbd

        $sequence_6 = { 50 ff15???????? 8d842410030000 50 8d84248c010000 50 }
            // n = 6, score = 100
            //   50                   | push                eax
            //   ff15????????         |                     
            //   8d842410030000       | lea                 eax, [esp + 0x310]
            //   50                   | push                eax
            //   8d84248c010000       | lea                 eax, [esp + 0x18c]
            //   50                   | push                eax

        $sequence_7 = { e8???????? 8904bd78f60210 85c0 7514 6a0c }
            // n = 5, score = 100
            //   e8????????           |                     
            //   8904bd78f60210       | mov                 dword ptr [edi*4 + 0x1002f678], eax
            //   85c0                 | test                eax, eax
            //   7514                 | jne                 0x16
            //   6a0c                 | push                0xc

        $sequence_8 = { 0f851b010000 8b01 c6400c01 8b31 c6410c00 }
            // n = 5, score = 100
            //   0f851b010000         | jne                 0x121
            //   8b01                 | mov                 eax, dword ptr [ecx]
            //   c6400c01             | mov                 byte ptr [eax + 0xc], 1
            //   8b31                 | mov                 esi, dword ptr [ecx]
            //   c6410c00             | mov                 byte ptr [ecx + 0xc], 0

        $sequence_9 = { 0f1f4000 8b06 8b4e08 3bc1 }
            // n = 4, score = 100
            //   0f1f4000             | nop                 dword ptr [eax]
            //   8b06                 | mov                 eax, dword ptr [esi]
            //   8b4e08               | mov                 ecx, dword ptr [esi + 8]
            //   3bc1                 | cmp                 eax, ecx

    condition:
        7 of them and filesize < 425984
}