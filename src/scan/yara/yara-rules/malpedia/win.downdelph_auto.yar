rule win_downdelph_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-12-06"
        version = "1"
        description = "Detects win.downdelph."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.downdelph"
        malpedia_rule_date = "20231130"
        malpedia_hash = "fc8a0e9f343f6d6ded9e7df1a64dac0cc68d7351"
        malpedia_version = "20230808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 85c9 0f84d2feffff 53 56 57 89c3 }
            // n = 6, score = 100
            //   85c9                 | test                ecx, ecx
            //   0f84d2feffff         | je                  0xfffffed8
            //   53                   | push                ebx
            //   56                   | push                esi
            //   57                   | push                edi
            //   89c3                 | mov                 ebx, eax

        $sequence_1 = { 83c4f8 8bf2 33d2 8bdc }
            // n = 4, score = 100
            //   83c4f8               | add                 esp, -8
            //   8bf2                 | mov                 esi, edx
            //   33d2                 | xor                 edx, edx
            //   8bdc                 | mov                 ebx, esp

        $sequence_2 = { e8???????? 48 50 8bc3 b901000000 8b15???????? }
            // n = 6, score = 100
            //   e8????????           |                     
            //   48                   | dec                 eax
            //   50                   | push                eax
            //   8bc3                 | mov                 eax, ebx
            //   b901000000           | mov                 ecx, 1
            //   8b15????????         |                     

        $sequence_3 = { 8d55d8 e8???????? 8b5708 88041a }
            // n = 4, score = 100
            //   8d55d8               | lea                 edx, [ebp - 0x28]
            //   e8????????           |                     
            //   8b5708               | mov                 edx, dword ptr [edi + 8]
            //   88041a               | mov                 byte ptr [edx + ebx], al

        $sequence_4 = { 53 56 33db 899de0fbffff }
            // n = 4, score = 100
            //   53                   | push                ebx
            //   56                   | push                esi
            //   33db                 | xor                 ebx, ebx
            //   899de0fbffff         | mov                 dword ptr [ebp - 0x420], ebx

        $sequence_5 = { 0f8cd6020000 46 33ff 8b15???????? 8bc7 e8???????? }
            // n = 6, score = 100
            //   0f8cd6020000         | jl                  0x2dc
            //   46                   | inc                 esi
            //   33ff                 | xor                 edi, edi
            //   8b15????????         |                     
            //   8bc7                 | mov                 eax, edi
            //   e8????????           |                     

        $sequence_6 = { 8b45fc e8???????? 50 8b45f0 }
            // n = 4, score = 100
            //   8b45fc               | mov                 eax, dword ptr [ebp - 4]
            //   e8????????           |                     
            //   50                   | push                eax
            //   8b45f0               | mov                 eax, dword ptr [ebp - 0x10]

        $sequence_7 = { 2bd3 2bd7 8bfa 85ff 7d02 33ff }
            // n = 6, score = 100
            //   2bd3                 | sub                 edx, ebx
            //   2bd7                 | sub                 edx, edi
            //   8bfa                 | mov                 edi, edx
            //   85ff                 | test                edi, edi
            //   7d02                 | jge                 4
            //   33ff                 | xor                 edi, edi

        $sequence_8 = { 68???????? 64ff32 648922 6a00 6800000080 }
            // n = 5, score = 100
            //   68????????           |                     
            //   64ff32               | push                dword ptr fs:[edx]
            //   648922               | mov                 dword ptr fs:[edx], esp
            //   6a00                 | push                0
            //   6800000080           | push                0x80000000

        $sequence_9 = { ff05???????? 7544 b8???????? e8???????? b8???????? }
            // n = 5, score = 100
            //   ff05????????         |                     
            //   7544                 | jne                 0x46
            //   b8????????           |                     
            //   e8????????           |                     
            //   b8????????           |                     

    condition:
        7 of them and filesize < 172032
}